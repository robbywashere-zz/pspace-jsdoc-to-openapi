/**
* {{&summary}}
* @method
{{#externalDocs}}
* @see {@link {{&url}}|{{#description}}{{&description}}{{/description}}{{^description}}External docs{{/description}}}
{{/externalDocs}}
* @name {{&className}}#{{&methodName}}
{{#parameters}}
{{^isBodyParameter}}{{^isSingleton}}
{{#required}}
  * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&name}} - {{&description}}
{{/required}}
{{^required}}
  * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> [{{&name}}] - {{&description}}
{{/required}}
{{/isSingleton}}
{{/isBodyParameter}}
{{#properties}}
    {{#required}}
  * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&name}} - {{&description}}
    {{/required}}
    {{^required}}
  * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> [{{&name}}] - {{&description}}
    {{/required}}
  {{/properties}}
{{/parameters}}
*/

{{&methodName}}(parameters: {
{{#parameters}}
{{^isSingleton}}
  {{^isBodyParameter}}
  '{{&name}}'{{&cardinality}}: {{>type}},
  {{/isBodyParameter}}
  {{#properties}}
  {{#required}}
    '{{&name}}':{{&type}},
  {{/required}}
  {{#notRequired}}
    '{{&name}}'?:{{&type}},
  {{/notRequired}}
  {{/properties}}
{{/isSingleton}}
{{/parameters}}
    $queryParameters?: any,
    $domain?: string
}): Promise<ResponseWithBody<{{&successfulResponseType}}>> {
    const domain = parameters.$domain ? parameters.$domain : this.domain;
    let path = '{{&path}}';
    let body: any;
    let queryParameters: any = {};
    let headers: any = {};
    let form: any = {};
    return new Promise((resolve, reject) => {
{{#headers}}
    headers['{{&name}}'] = {{&value}};
{{/headers}}


  {{#hasBodyParams}}
  const bodyParams: Array<string> = [{{#parameters}}{{#isBodyParameter}}{{#properties}}'{{&name}}',{{/properties}}{{/isBodyParameter}}{{/parameters}}];
  bodyParams.forEach(bp=>{ if (bp in parameters) body[bp] = (parameters as any)[bp] });

  {{/hasBodyParams}}

  {{#hasRequired}}
  const requiredParams: Array<string> = [{{#parameters}}{{^isBodyParameter}}{{#required}}'{{&name}}',{{/required}}{{/isBodyParameter}}{{/parameters}}];
  const requiredBodyParams: Array<string> = [{{#parameters}}{{#isBodyParameter}}{{#properties}}{{#required}}'{{&name}}',{{/required}}{{/properties}}{{/isBodyParameter}}{{/parameters}}];
  [...requiredParams,requiredBodyParams].forEach(rp=>{ if (!(rp in parameters)) { throw new Error(`Missing required parameter ${rp}`) } })
  {{/hasRequired}}
  

  {{#hasQueryParams}}
  const queryParams: Array<string> = [{{#parameters}}{{^isPatternType}}{{#isQueryParameter}}{{^isSingleton}}{{^isPatternType}}'{{&name}}',{{/isPatternType}}{{/isSingleton}}{{/isQueryParameter}}{{/isPatternType}}{{/parameters}}];

  queryParams.forEach(qp => { if (qp in parameters) queryParameters[qp] = (parameters as any)[qp]})

  {{/hasQueryParams}}
{{#parameters}}
    {{#isQueryParameter}}
        {{#isSingleton}}
            queryParameters['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#isPatternType}}
                Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                        queryParameters[parameterName] = parameters[parameterName];
                    }
                });
            {{/isPatternType}}
        {{/isSingleton}}
    {{/isQueryParameter}}


    {{#isPathParameter}}
        path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', `${parameters['{{&name}}']}`);
    {{/isPathParameter}}

    {{#isHeaderParameter}}
        {{#isSingleton}}
            headers['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&name}}'] !== undefined) {
                headers['{{&name}}'] = parameters['{{&name}}'];
            }
        {{/isSingleton}}
    {{/isHeaderParameter}}


    {{#isFormParameter}}
        {{#isSingleton}}
            form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&name}}'] !== undefined) {
                form['{{&name}}'] = parameters['{{&name}}'];
            }
        {{/isSingleton}}
    {{/isFormParameter}}

    
    
{{/parameters}}

if(parameters.$queryParameters) {
    Object.keys(parameters.$queryParameters).forEach(function(parameterName){
        queryParameters[parameterName] = parameters.$queryParameters[parameterName];
    });
}

    {{^isBodyParameter}}
        {{#isPOST}}
            form = queryParameters;
            queryParameters = {};
        {{/isPOST}}
    {{/isBodyParameter}}

    this.request('{{method}}', domain + path, body, headers, queryParameters, form, reject, resolve);
    });
}
